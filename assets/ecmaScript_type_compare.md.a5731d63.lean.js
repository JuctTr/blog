import{_ as s,c as n,o as a,a as l}from"./app.7e617ccb.js";const F=JSON.parse('{"title":"显式类型转换和隐式类型转换","description":"","frontmatter":{"title":"显式类型转换和隐式类型转换","categories":"前端","date":"2019-07-03T20:59:11.000Z","tags":["JavaScript","Web","编程"]},"headers":[{"level":2,"title":"强(数据)类型语言","slug":"强-数据-类型语言","link":"#强-数据-类型语言","children":[]},{"level":2,"title":"弱(数据)类型语言","slug":"弱-数据-类型语言","link":"#弱-数据-类型语言","children":[]},{"level":2,"title":"Number()","slug":"number","link":"#number","children":[]},{"level":2,"title":"String()","slug":"string","link":"#string","children":[]},{"level":2,"title":"Boolean()","slug":"boolean","link":"#boolean","children":[{"level":3,"title":"valueOf()  返回该对象对应的原始值","slug":"valueof-返回该对象对应的原始值","link":"#valueof-返回该对象对应的原始值","children":[]},{"level":3,"title":"toString  返回对象的字符串的表现形式","slug":"tostring-返回对象的字符串的表现形式","link":"#tostring-返回对象的字符串的表现形式","children":[]},{"level":3,"title":"Number方法背后的原理","slug":"number方法背后的原理","link":"#number方法背后的原理","children":[]},{"level":3,"title":"String方法背后的原理","slug":"string方法背后的原理","link":"#string方法背后的原理","children":[]},{"level":3,"title":"==   两边发生的隐式转换","slug":"两边发生的隐式转换","link":"#两边发生的隐式转换","children":[]},{"level":3,"title":"逗号运算符","slug":"逗号运算符","link":"#逗号运算符","children":[]}]}],"relativePath":"ecmaScript/type_compare.md"}'),o={name:"ecmaScript/type_compare.md"},p=l("",56),t=[p];function e(c,r,y,D,C,A){return a(),n("div",null,t)}const d=s(o,[["render",e]]);export{F as __pageData,d as default};
